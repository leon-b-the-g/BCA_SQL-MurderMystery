<?xml version="1.0" encoding="UTF-8"?><sqlb_project><db path="Spike_windowframes.db" readonly="0" foreign_keys="1" case_sensitive_like="0" temp_store="0" wal_autocheckpoint="1000" synchronous="2"/><attached/><window><main_tabs open="structure browser pragmas query" current="3"/></window><tab_structure><column_width id="0" width="300"/><column_width id="1" width="0"/><column_width id="2" width="100"/><column_width id="3" width="561"/><column_width id="4" width="0"/><expanded_item id="0" parent="1"/><expanded_item id="1" parent="1"/><expanded_item id="2" parent="1"/><expanded_item id="3" parent="1"/></tab_structure><tab_browse><table title=".Browsables" custom_title="0" dock_id="2" table="0,10:Browsables"/><dock_state state="000000ff00000000fd0000000100000002000003c900000276fc0100000002fb000000160064006f0063006b00420072006f007700730065003101000000000000033b0000000000000000fb000000160064006f0063006b00420072006f00770073006500320100000000000003c90000011800ffffff000003c90000000000000004000000040000000800000008fc00000000"/><default_encoding codec=""/><browse_table_settings><table schema="" name="Browsables" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths/><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Manufacturers" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="36"/><column index="2" value="124"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table><table schema="main" name="Products" show_row_id="0" encoding="" plot_x_axis="" unlock_view_pk="_rowid_" freeze_columns="0"><sort/><column_widths><column index="1" value="36"/><column index="2" value="124"/><column index="3" value="46"/><column index="4" value="83"/></column_widths><filter_values/><conditional_formats/><row_id_formats/><display_formats/><hidden_columns/><plot_y_axes/><global_filter/></table></browse_table_settings></tab_browse><tab_sql><sql name="SQL 1">CREATE TABLE IF NOT EXISTS Manufacturers (
  Code INTEGER,
  Name TEXT NOT NULL,
  PRIMARY KEY (Code)
);

CREATE TABLE IF NOT EXISTS Products (
  Code INTEGER,
  Name TEXT NOT NULL,
  Price INTEGER NOT NULL,
  Manufacturer INTEGER NOT NULL,
  PRIMARY KEY (Code)
);

INSERT INTO Manufacturers(Code,Name) VALUES(1,'Sony');
INSERT INTO Manufacturers(Code,Name) VALUES(2,'Creative Labs');
INSERT INTO Manufacturers(Code,Name) VALUES(3,'Hewlett-Packard');
INSERT INTO Manufacturers(Code,Name) VALUES(4,'Iomega');
INSERT INTO Manufacturers(Code,Name) VALUES(5,'Fujitsu');
INSERT INTO Manufacturers(Code,Name) VALUES(6,'Winchester');

INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(1,'Hard drive',240,5);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(2,'Memory',120,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(3,'ZIP drive',150,4);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(4,'Floppy disk',5,6);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(5,'Monitor',240,1);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(6,'DVD drive',180,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(7,'CD drive',90,2);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(8,'Printer',270,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(9,'Toner cartridge',66,3);
INSERT INTO Products(Code,Name,Price,Manufacturer) VALUES(10,'DVD burner',180,2);</sql><sql name="Task 2">-- 1.1 Select the names of all the products in the store.

--SELECT Name FROM Products

-- 1.2 Select the names and the prices of all the products in the store.

--SELECT Name,Price FROM Products;

-- 1.3 Select the name of the products with a price less than or equal to $200.
--SELECT Name, Price FROM Products WHERE Price &lt;= 200

-- 1.4 Select all the products with a price between $60 and $120.

--SELECT * FROM Products WHERE Price &lt;= 60 AND Price &gt;= 120

-- 1.5 Select the name and price in cents (i.e., the price must be multiplied by 100).

--SELECT Name, Price*100 AS Price FROM Products

-- 1.6 Compute the average price of all the products.

--SELECT Avg(Price) AS Average_Price FROM Products

-- 1.7 Compute the average price of all products with manufacturer code equal to 2.

--SELECT AVG(Price) FROM Products WHERE Manufacturer = 2;

-- 1.8 Compute the number of products with a price larger than or equal to $180.

--SELECT COUNT(*) FROM Products WHERE Price &gt;= 180;

-- 1.9 Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name (in ascending order).

--SELECT Name,Price FROM Products WHERE Price &gt;= 180
--ORDER BY Price DESC, Name ASC;

-- 1.10 Select all the data from the products, including all the data for each product's manufacturer.
--SELECT * FROM Products
--JOIN Manufacturers
--ON Manufacturers.Code = Products.Manufacturer;




-- 1.11 Select the product name, price, and manufacturer name of all the products.
--SELECT Products.Name,Products.Price, Manufacturers.Name 
--FROM Products
--JOIN Manufacturers
--ON Manufacturers.Code = Products.Manufacturer;


-- 1.12 Select the average price of each manufacturer's products, showing only the manufacturer's code.
--SELECT AVG(Price),Manufacturer FROM Products
--GROUP BY Manufacturer;

-- 1.13 Select the average price of each manufacturer's products, showing the manufacturer's name.
--SELECT AVG(Price),Manufacturers.Name FROM Products
--JOIN Manufacturers ON Manufacturers.Code = Products.Manufacturer
--GROUP BY Manufacturer;



-- 1.14 Select the names of manufacturer whose products have an average price larger than or equal to $150.
--SELECT AVG(Price),Manufacturers.Name FROM Products
--JOIN Manufacturers ON Manufacturers.Code = Products.Manufacturer
G--ROUP BY Manufacturer HAVING AVG(Products.Price) &gt;= 150;


-- 1.15 Select the name and price of the cheapest product.
	--SELECT Name,Price, Min(Price) FROM Products;
--OR
	--SELECT Name,Price FROM Products ORDER BY Price LIMIT;
	
	
-- 1.16 Select the name of each manufacturer along with the name and price of its most expensive product.
--SELECT MAX(Products.Price) AS highest_price,Products.Name, Manufacturers.Name
--FROM Products JOIN 
--Manufacturers ON Manufacturers.Code = Products.Manufacturer
--GROUP BY Manufacturers.Name;

-- 1.17 Add a new product: Loudspeakers, $70, manufacturer 2.

--INSERT INTO Products (Name,Price,Manufacturer)
--VALUES ('Loudspeakers','70','2')


-- 1.18 Update the name of product 8 to &quot;Laser Printer&quot;.
--UPDATE Products SET Name = 'Laser Printer' 
--WHERE Products.Code = 8;

-- 1.19 Apply a 10% discount to all products.
--UPDATE Products SET Price = Price * 0.9;


-- 1.20 Apply a 10% discount to all products with a price larger than or equal to $120.
	--UPDATE Products SET Price = Price * 0.9 WHERE Price &gt;= 120 ;


</sql><sql name="Example code Partitions*">SELECT *, COUNT (*) OVER() AS student_count FROM students;

SELECT *, COUNT(*) AS course _count FROM students GROUP BY course;

--SAME AS: but iterating the count into the rows, can 
SELECT *, COUNT (*)
OVER(PARTITION BY course)
	AS course_count
FROM students WHERE cohort = 1;


--Partiioning lets you apply cool aggregate functions to whole &quot;sections&quot; or window frames of data

SELECT *, 
	ROW_NUMBER()( OVER(PARTITION BY cohort)
	As row;
FROM students;

</sql><current_tab id="2"/></tab_sql></sqlb_project>
